{"version":3,"sources":["helper.js","button.js","buttons.js","styling.js","snake-game.js","index.js"],"names":["phoneKeysToKeycodes","2","4","6","8","clickableKeys","Object","keys","isClickable","n","includes","toString","StyledButton","styled","button","_templateObject","props","children","Button","_ref","number","onClick","react_default","a","createElement","StyledGrid","div","buttons_templateObject","numberArrays","toConsumableArray","Array","slice","push","Buttons","onKeyDown","map","src_button","key","e","preventDefault","keyCode","click","x","y","velocity","snakeTrail","snakeLength","targetX","targetY","phoneColors","PhoneImage","img","styling_templateObject","Container","_templateObject2","GameArea","canvas","_templateObject3","PhoneBackscreen","_templateObject4","resetGame","Math","floor","random","SnakeGame","clearInterval","this","interval","_this","canv","refs","ctx","getContext","document","addEventListener","setInterval","game","removeEventListener","isLeft","isUp","isRight","isDown","fillStyle","fillRect","width","height","forEach","i","cellSizeX","cellSizeY","isLost","tileCount","length","isWon","src","concat","process","alt","id","ref","buttons","Component","ReactDOM","render","snake_game","getElementById"],"mappings":"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","file":"static/js/main.6fb684f2.chunk.js","sourcesContent":["const isLeft = e => e.keyCode === 37;\nconst isUp = e => e.keyCode === 38;\nconst isRight = e => e.keyCode === 39;\nconst isDown = e => e.keyCode === 40;\nconst isLost = (i, x, y) => i.x === x && i.y === y;\nconst isWon = (targetX, x, targetY, y) => targetX === x && targetY === y;\n\nconst phoneKeysToKeycodes = {\n  '2': 38,\n  '4': 37,\n  '6': 39,\n  '8': 40\n};\n\nconst clickableKeys = Object.keys(phoneKeysToKeycodes);\n\nconst isClickable = n => clickableKeys.includes(n.toString());\n\nexport {\n  isLeft,\n  isUp,\n  isRight,\n  isDown,\n  isLost,\n  isWon,\n  phoneKeysToKeycodes,\n  isClickable\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { isClickable } from './helper';\n\nconst StyledButton = styled.button`\n  z-index: 500;\n  background-color: lightgrey;\n  color: black;\n  box-shadow: 0 0.8vh #1a1a1a;\n  border: none;\n  border-radius: 50%;\n  outline: none;\n  font-size: 4vh;\n  font-weight: bold;\n  margin: 1.25vh 1vh 0;\n  cursor: ${props => (isClickable(props.children) ? 'pointer' : 'default')};\n\n  &:active {\n    background-color: #bababa;\n    color: ${props =>\n    isClickable(props.children) ? 'lightgoldenrodyellow' : 'black'};\n    box-shadow: 0 0.2vh #050505;\n    text-shadow: ${props =>\n    isClickable(props.children)\n      ? '0.2vh 0.2vh 0.4vh grey, 0 0 5vh lightgoldenrodyellow, 0 0 1vh yellow'\n      : 'null'};\n    transform: translateY(0.6vh);\n  }\n`;\n\nconst Button = ({ number, onClick }) => (\n  <StyledButton onClick={onClick}>{number}</StyledButton>\n);\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Button from './button';\nimport { phoneKeysToKeycodes, isClickable } from './helper';\n\nconst StyledGrid = styled.div`\n  position: absolute;\n  top: 66%;\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  width: 33vh;\n`;\nlet numberArrays = [...Array(10).keys()].slice(1);\nnumberArrays.push('*', '0', '#');\n\nconst click = (n, onKeyDown) => {\n  let e = { preventDefault: () => {} };\n\n  if (isClickable(n)) {\n    e.keyCode = phoneKeysToKeycodes[n];\n    onKeyDown(e);\n  }\n};\n\nconst Buttons = ({ onKeyDown }) => (\n  <StyledGrid>\n    {numberArrays.map(n => (\n      <Button number={n} key={n} onClick={() => click(n, onKeyDown)} />\n    ))}\n  </StyledGrid>\n);\n\nexport default Buttons;\n","import styled from 'styled-components';\n\nconst phoneColors = {\n  light: '#AEC108',\n  dark: '#5C5003'\n};\n\nconst PhoneImage = styled.img`\n  z-index: 2;\n  position: absolute;\n  height: 100%;\n`;\n\nconst Container = styled.div`\n  background: linear-gradient(to right, teal, white, teal);\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst GameArea = styled.canvas`\n  position: absolute;\n  z-index: 100;\n  top: 28%;\n  height: 17.5%;\n  border: 2px ridge ${phoneColors.dark};\n`;\n\nconst PhoneBackscreen = styled.canvas`\n  position: relative;\n  z-index: 1;\n  top: 25%;\n  background: ${phoneColors.light};\n  height: 24%;\n`;\n\nexport { phoneColors, Container, PhoneImage, GameArea, PhoneBackscreen };\n","import React, { Component } from 'react';\n\nimport Buttons from './buttons';\nimport {\n  phoneColors,\n  Container,\n  PhoneImage,\n  GameArea,\n  PhoneBackscreen\n} from './styling';\nimport { isLeft, isUp, isRight, isDown, isLost, isWon } from './helper';\n\nconst baseUrl = process.env.PUBLIC_URL;\n\n// Game dimensions and speed\nconst cellSizeX = 8;\nconst cellSizeY = 6;\nconst tileCount = 20;\nconst paintAreaX = cellSizeX - 1;\nconst paintAreaY = cellSizeY - 1;\nconst gameSpeed = 100;\n\n// initial player position\nlet x;\nlet y;\n// initial snake velocity as [x, y]\nlet velocity;\n// initial snake trail and snake length\nlet snakeTrail;\nlet snakeLength;\n// initial target position\nlet targetX;\nlet targetY;\n\nconst resetGame = () => {\n  velocity = [1, 0];\n  x = 10;\n  y = 10;\n  snakeTrail = [];\n  snakeLength = 5;\n  targetX = Math.floor(Math.random() * tileCount);\n  targetY = Math.floor(Math.random() * tileCount);\n};\nresetGame();\n\nclass SnakeGame extends Component {\n  componentWillMount () {\n    clearInterval(this.interval);\n  }\n\n  componentDidMount () {\n    const canv = this.refs['myGameCanvas'];\n    const ctx = canv.getContext('2d');\n    document.addEventListener('keydown', this.onKeyDown);\n    this.interval = setInterval(() => this.game(canv, ctx), gameSpeed);\n  }\n\n  componentWillUnmount () {\n    document.removeEventListener('keydown', this.onKeyDown);\n    clearInterval(this.interval);\n    resetGame();\n  }\n\n  onKeyDown (e) {\n    e.preventDefault();\n\n    // checks for keys but also prevents a move in an opposite direction\n    if (isLeft(e) && velocity[0] !== 1 && velocity[1] !== 0) {\n      velocity = [-1, 0];\n    } else if (isUp(e) && velocity[0] !== 0 && velocity[1] !== 1) {\n      velocity = [0, -1];\n    } else if (isRight(e) && velocity[0] !== -1 && velocity[1] !== 0) {\n      velocity = [1, 0];\n    } else if (isDown(e) && velocity[0] !== 0 && velocity[1] !== -1) {\n      velocity = [0, 1];\n    }\n  }\n\n  game (canv, ctx) {\n    // paints the canvas background\n    ctx.fillStyle = phoneColors.light;\n    ctx.fillRect(0, 0, canv.width, canv.height);\n\n    // sets the new x and y positions\n    x += velocity[0];\n    y += velocity[1];\n\n    // paints the snake\n    ctx.fillStyle = phoneColors.dark;\n    snakeTrail.forEach(i => {\n      ctx.fillRect(i.x * cellSizeX, i.y * cellSizeY, paintAreaX, paintAreaY);\n\n      if (isLost(i, x, y)) {\n        resetGame();\n      }\n    });\n\n    // redefine x & y if the snake exits the game area\n    if (x < 0) x = tileCount - 1;\n    if (x > tileCount - 1) x = 0;\n    if (y < 0) y = tileCount - 1;\n    if (y > tileCount - 1) y = 0;\n\n    // updates the snakeTrail with the new coordinate\n    snakeTrail.push({ x, y });\n\n    // removes irrelevant coordinates to keep the trail length equal to the snake length\n    if (snakeTrail.length > snakeLength) {\n      snakeTrail = snakeTrail.slice(snakeTrail.length - snakeLength);\n    }\n\n    if (isWon(targetX, x, targetY, y)) {\n      snakeLength++;\n      targetX = Math.floor(Math.random() * tileCount);\n      targetY = Math.floor(Math.random() * tileCount);\n    }\n\n    // paints the target\n    ctx.fillStyle = phoneColors.dark;\n    ctx.fillRect(\n      targetX * cellSizeX,\n      targetY * cellSizeY,\n      paintAreaX,\n      paintAreaY\n    );\n    ctx.fillStyle = phoneColors.light;\n    ctx.fillRect(targetX * cellSizeX + 2, targetY * cellSizeY + 2, 3, 1);\n  }\n\n  render () {\n    return (\n      <Container>\n        <PhoneImage\n          src={`${baseUrl}/nostalgic_phone.png`}\n          alt='nostalgic_phone'\n        />\n        <GameArea height='120' width='160' id='gameCanvas' ref='myGameCanvas' />\n        <PhoneBackscreen height='150' width='190' />\n        <Buttons onKeyDown={this.onKeyDown} />\n      </Container>\n    );\n  }\n}\n\nexport default SnakeGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SnakeGame from './snake-game';\n\nReactDOM.render(<SnakeGame />, document.getElementById('root'));\n"],"sourceRoot":""}