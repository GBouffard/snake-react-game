{"version":3,"sources":["score-display.js","helper.js","button.js","buttons.js","tooltip.js","styling.js","snake-game.js","index.js"],"names":["StyledScoreDisplay","styled","div","_templateObject","ScoreDisplay","_ref","score","react_default","a","createElement","phoneKeysToKeycodes","2","4","6","8","clickableKeys","Object","keys","isClickable","n","includes","toString","StyledButton","button","button_templateObject","props","children","Button","number","onClick","StyledGrid","buttons_templateObject","numberArrays","toConsumableArray","Array","slice","push","Buttons","onKeyDown","map","src_button","key","e","preventDefault","keyCode","click","StyledTrigger","svg","tooltip_templateObject","StyledCircle","circle","_templateObject2","StyledText","text","_templateObject3","StyledMessageContainer","_templateObject4","StyledMessage","_templateObject5","Tooltip","_useState","useState","_useState2","slicedToArray","shouldShow","updateShouldShow","actionsProps","onMouseOver","isTouch","onMouseLeave","react","id","offset","stopColor","assign","fill","x","y","dominantBaseline","textAnchor","velocity","snakeTrail","snakeLength","targetX","targetY","phoneColors","PhoneImage","img","styling_templateObject","Container","styling_templateObject2","GameArea","canvas","styling_templateObject3","PhoneBackscreen","styling_templateObject4","resetGame","Math","floor","random","renderScoreDisplay","ReactDOM","render","score_display","document","getElementById","SnakeGame","clearInterval","this","interval","_this","canv","refs","ctx","getContext","addEventListener","setInterval","game","removeEventListener","isLeft","isUp","isRight","isDown","fillStyle","fillRect","width","height","forEach","i","cellSizeX","cellSizeY","isLost","tileCount","length","isWon","tooltip","src","concat","process","alt","ref","buttons","Component","snake_game"],"mappings":"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","file":"static/js/main.524c12a9.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledScoreDisplay = styled.div`\n  position: absolute;\n  top: 1vh;\n  left: 1vw;\n  font-size: 3vh;\n  color: white;\n  text-shadow: 0.2vh 0.2vh 0.5vh black, 0 0 4vh lightsteelblue, 0 0 1vh aqua;\n  z-index: 999;\n`\n\nconst ScoreDisplay = ({ score }) => (\n  <StyledScoreDisplay>\n    Score:\n    {score}\n  </StyledScoreDisplay>\n)\n\nexport default ScoreDisplay\n","const isLeft = e => e.keyCode === 37\nconst isUp = e => e.keyCode === 38\nconst isRight = e => e.keyCode === 39\nconst isDown = e => e.keyCode === 40\nconst isLost = (i, x, y) => i.x === x && i.y === y\nconst isWon = (targetX, x, targetY, y) => targetX === x && targetY === y\n\nconst phoneKeysToKeycodes = {\n  '2': 38,\n  '4': 37,\n  '6': 39,\n  '8': 40\n}\n\nconst clickableKeys = Object.keys(phoneKeysToKeycodes)\n\nconst isClickable = n => clickableKeys.includes(n.toString())\n\nexport {\n  isLeft,\n  isUp,\n  isRight,\n  isDown,\n  isLost,\n  isWon,\n  phoneKeysToKeycodes,\n  isClickable\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { isClickable } from './helper'\n\nconst StyledButton = styled.button`\n  z-index: 500;\n  background-color: lightgrey;\n  color: black;\n  box-shadow: 0 0.8vh #1a1a1a;\n  border: none;\n  border-radius: 50%;\n  outline: none;\n  font-size: 4vh;\n  font-weight: bold;\n  margin: 1.25vh 1vh 0;\n  cursor: ${props => (isClickable(props.children) ? 'pointer' : 'default')};\n\n  &:active {\n    background-color: #bababa;\n    color: ${props =>\n    isClickable(props.children) ? 'lightgoldenrodyellow' : 'black'};\n    -webkit-tap-highlight-color: transparent;\n    box-shadow: 0 0.2vh #050505;\n    text-shadow: ${props =>\n    isClickable(props.children)\n      ? '0.2vh 0.2vh 0.4vh grey, 0 0 5vh lightgoldenrodyellow, 0 0 1vh yellow'\n      : 'null'};\n    transform: translateY(0.6vh);\n  }\n`\n\nconst Button = ({ number, onClick }) => (\n  <StyledButton onClick={onClick}>{number}</StyledButton>\n)\n\nexport default Button\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Button from './button'\nimport { phoneKeysToKeycodes, isClickable } from './helper'\n\nconst StyledGrid = styled.div`\n  position: absolute;\n  top: 66%;\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  width: 33vh;\n`\nlet numberArrays = [...Array(10).keys()].slice(1)\nnumberArrays.push('*', '0', '#')\n\nconst click = (n, onKeyDown) => {\n  let e = { preventDefault: () => {} }\n\n  if (isClickable(n)) {\n    e.keyCode = phoneKeysToKeycodes[n]\n    onKeyDown(e)\n  }\n}\n\nconst Buttons = ({ onKeyDown }) => (\n  <StyledGrid>\n    {numberArrays.map(n => (\n      <Button number={n} key={n} onClick={() => click(n, onKeyDown)} />\n    ))}\n  </StyledGrid>\n)\n\nexport default Buttons\n","import React, { Fragment, useState } from 'react'\nimport styled from 'styled-components'\nimport isTouch from 'is-touch-device'\n\nconst message = `Snake is a video game where the player maneuvers a snake which grows in length each time it reaches food. The goal is to make the snake as large as possible before the game ends which happens when the snake moves into itself. The first version originated in 1976 and the one below (from 1998) came as a package on old mobile phone.\n\n\nHow to play:\n• on desktop; use the arrow keys (↑, →, ↓, ←).\n• on mobile; like on an original phone, click the following keys instead:\n  2 (↑)  4 (←)  6 (→)  8 (↓)`\n\nconst StyledTrigger = styled.svg`\n  position: absolute;\n  right: 0;\n  height: 12vw;\n  width: 12vw;\n  cursor: default;\n`\n\nconst StyledCircle = styled.circle`\n  cx: 50%;\n  cy: 50%;\n  r: 4vw;\n  stroke: darkgrey;\n  stroke-width: 3;\n`\n\nconst StyledText = styled.text`\n  font-weight: bold;\n  font-size: 6vw;\n  fill: ghostwhite;\n`\n\nconst StyledMessageContainer = styled.div`\n  position: absolute;\n  top: 15vw;\n  width: 92vw;\n  height: 75vh;\n  z-index: 900;\n\n  &&::after {\n    content: \"\";\n    position: absolute;\n\n    border-bottom: 3vw solid darkgrey;\n    border-right: 2vw solid transparent;\n    border-left: 2vw solid transparent;\n    top: -1vw;\n    right: 0;\n    transform: translateY(-50%);\n  }\n`\n\nconst StyledMessage = styled.div`\n  background: linear-gradient(#333333, black, #333333);\n  border: 0.5vw solid darkgrey;\n  border-radius: 1vw;\n  color: white;\n  font-size: 2vh;\n  font-weight: 500;\n  line-height: 1.4;\n  white-space: pre-wrap;\n  padding: 5vw;\n  text-align: left;\n`\n\nconst Tooltip = () => {\n  const [shouldShow, updateShouldShow] = useState(false)\n\n  const actionsProps = {\n    onMouseOver: () => (isTouch() ? null : updateShouldShow(true)),\n    onMouseLeave: () => (isTouch() ? null : updateShouldShow(false)),\n    onClick: () => (isTouch() ? updateShouldShow(!shouldShow) : null)\n  }\n\n  return (\n    <Fragment>\n      <StyledTrigger>\n        <radialGradient id='circleGradient'>\n          <stop offset='1%' stopColor='black' />\n          <stop offset='95%' stopColor='#333333' />\n        </radialGradient>\n\n        <StyledCircle fill=\"url('#circleGradient')\" {...actionsProps} />\n\n        <StyledText\n          x='50%'\n          y='55%'\n          dominantBaseline='middle'\n          textAnchor='middle'\n          {...actionsProps}\n        >\n          ?\n        </StyledText>\n      </StyledTrigger>\n\n      {shouldShow && (\n        <StyledMessageContainer>\n          <StyledMessage>{message}</StyledMessage>\n        </StyledMessageContainer>\n      )}\n    </Fragment>\n  )\n}\n\nexport default Tooltip\n","import styled from 'styled-components'\n\nconst phoneColors = {\n  light: '#AEC108',\n  dark: '#5C5003'\n}\n\nconst PhoneImage = styled.img`\n  z-index: 2;\n  position: absolute;\n  height: 100%;\n`\n\nconst Container = styled.div`\n  background: linear-gradient(to right, teal, white, teal);\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst GameArea = styled.canvas`\n  position: absolute;\n  z-index: 8;\n  top: 28%;\n  height: 17.5%;\n  border: 2px ridge ${phoneColors.dark};\n`\n\nconst PhoneBackscreen = styled.canvas`\n  position: relative;\n  z-index: 1;\n  top: 25%;\n  background: ${phoneColors.light};\n  height: 24%;\n`\n\nexport { phoneColors, Container, PhoneImage, GameArea, PhoneBackscreen }\n","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport ScoreDisplay from './score-display'\nimport Buttons from './buttons'\nimport Tooltip from './tooltip'\nimport {\n  phoneColors,\n  Container,\n  PhoneImage,\n  GameArea,\n  PhoneBackscreen\n} from './styling'\nimport { isLeft, isUp, isRight, isDown, isLost, isWon } from './helper'\n\nconst baseUrl = process.env.PUBLIC_URL\n\n// Game dimensions and speed\nconst cellSizeX = 8\nconst cellSizeY = 6\nconst tileCount = 20\nconst paintAreaX = cellSizeX - 1\nconst paintAreaY = cellSizeY - 1\nconst gameSpeed = 100\n\n// initial player position\nlet x\nlet y\n// initial snake velocity as [x, y]\nlet velocity\n// initial snake trail and snake length\nlet snakeTrail\nlet snakeLength\n// initial target position\nlet targetX\nlet targetY\nlet score\n\nconst resetGame = () => {\n  velocity = [1, 0]\n  x = 10\n  y = 10\n  snakeTrail = []\n  snakeLength = 5\n  targetX = Math.floor(Math.random() * tileCount)\n  targetY = Math.floor(Math.random() * tileCount)\n  score = 0\n}\nresetGame()\n\nconst renderScoreDisplay = score =>\n  ReactDOM.render(\n    <ScoreDisplay score={score} />,\n    document.getElementById('score-display')\n  )\n\nclass SnakeGame extends Component {\n  componentWillMount () {\n    clearInterval(this.interval)\n  }\n\n  componentDidMount () {\n    const canv = this.refs['myGameCanvas']\n    const ctx = canv.getContext('2d')\n    document.addEventListener('keydown', this.onKeyDown)\n    this.interval = setInterval(() => this.game(canv, ctx), gameSpeed)\n    renderScoreDisplay(0)\n  }\n\n  componentWillUnmount () {\n    document.removeEventListener('keydown', this.onKeyDown)\n    clearInterval(this.interval)\n    resetGame()\n  }\n\n  onKeyDown (e) {\n    e.preventDefault()\n\n    // checks for keys but also prevents a move in an opposite direction\n    if (isLeft(e) && velocity[0] !== 1 && velocity[1] !== 0) {\n      velocity = [-1, 0]\n    } else if (isUp(e) && velocity[0] !== 0 && velocity[1] !== 1) {\n      velocity = [0, -1]\n    } else if (isRight(e) && velocity[0] !== -1 && velocity[1] !== 0) {\n      velocity = [1, 0]\n    } else if (isDown(e) && velocity[0] !== 0 && velocity[1] !== -1) {\n      velocity = [0, 1]\n    }\n  }\n\n  game (canv, ctx) {\n    // paints the canvas background\n    ctx.fillStyle = phoneColors.light\n    ctx.fillRect(0, 0, canv.width, canv.height)\n\n    // sets the new x and y positions\n    x += velocity[0]\n    y += velocity[1]\n\n    // paints the snake\n    ctx.fillStyle = phoneColors.dark\n    snakeTrail.forEach(i => {\n      ctx.fillRect(i.x * cellSizeX, i.y * cellSizeY, paintAreaX, paintAreaY)\n\n      if (isLost(i, x, y)) {\n        resetGame()\n      }\n    })\n\n    // redefine x & y if the snake exits the game area\n    if (x < 0) x = tileCount - 1\n    if (x > tileCount - 1) x = 0\n    if (y < 0) y = tileCount - 1\n    if (y > tileCount - 1) y = 0\n\n    // updates the snakeTrail with the new coordinate\n    snakeTrail.push({ x, y })\n\n    // removes irrelevant coordinates to keep the trail length equal to the snake length\n    if (snakeTrail.length > snakeLength) {\n      snakeTrail = snakeTrail.slice(snakeTrail.length - snakeLength)\n    }\n\n    if (isWon(targetX, x, targetY, y)) {\n      snakeLength++\n      score++\n      renderScoreDisplay(score)\n      targetX = Math.floor(Math.random() * tileCount)\n      targetY = Math.floor(Math.random() * tileCount)\n    }\n\n    // paints the target\n    ctx.fillStyle = phoneColors.dark\n    ctx.fillRect(\n      targetX * cellSizeX,\n      targetY * cellSizeY,\n      paintAreaX,\n      paintAreaY\n    )\n    ctx.fillStyle = phoneColors.light\n    ctx.fillRect(targetX * cellSizeX + 2, targetY * cellSizeY + 2, 3, 1)\n  }\n\n  render () {\n    return (\n      <Container>\n        <div id='score-display' />\n        <Tooltip />\n        <PhoneImage\n          src={`${baseUrl}/nostalgic_phone.png`}\n          alt='nostalgic_phone'\n        />\n        <GameArea height='120' width='160' id='gameCanvas' ref='myGameCanvas' />\n        <PhoneBackscreen height='150' width='190' />\n        <Buttons onKeyDown={this.onKeyDown} />\n      </Container>\n    )\n  }\n}\n\nexport default SnakeGame\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport SnakeGame from './snake-game'\n\nReactDOM.render(<SnakeGame />, document.getElementById('root'))\n"],"sourceRoot":""}